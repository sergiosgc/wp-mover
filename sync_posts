#!/usr/bin/env python3
import requests
import json
import base64
from pprint import pprint
import os.path
import sys
import mimetypes


enable_cache = True

with open("credentials.json", "r") as f:
    credentials = json.loads(f.read())
    left = credentials['left']
    right = credentials['right']
    del credentials

with open("left_to_right_user_map.json", "r") as f:
    left_to_right_user_map = { int(k): v for k,v in json.loads(f.read()).items() }

with open("left_to_right_media_map.json", "r") as cache_file:
    left_to_right_media_map = json.loads(cache_file.read())

def wp_get(wp, url):
    headers = {
        'Authorization': 'Basic ' + base64.b64encode((wp['username'] + ':' + wp['password']).encode()).decode('utf-8'),
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'User-Agent': 'curl/7.86.0'
    }
    return requests.get( wp['url'] + "/wp-json/wp/v2" + url, headers=headers).json()

def wp_post_json(wp, url, json, headers={}):
    headers = dict(headers, **{
        'Authorization': 'Basic ' + base64.b64encode((wp['username'] + ':' + wp['password']).encode()).decode('utf-8'),
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'User-Agent': 'curl/7.86.0'
    })
    return requests.post( wp['url'] + "/wp-json/wp/v2" + url, headers=headers, json=json).json()

def wp_post_file(wp, url, file, filename):
    headers = {
        'Authorization': 'Basic ' + base64.b64encode((wp['username'] + ':' + wp['password']).encode()).decode('utf-8'),
        'Accept': 'application/json',
        'User-Agent': 'curl/7.86.0',
        'Content-disposition': ('attachment; filename="%s"' % (filename,)).encode('utf-8'),
    }
    return requests.post( wp['url'] + "/wp-json/wp/v2" + url, headers=headers, files={"file": (filename, file, mimetypes.guess_type(filename)[0])}).json()

def wp_get_paged(wp, url):
    results_returned = True
    result = []
    page = 1
    while results_returned:
        loop_result = wp_get(wp, url + ("?page=%s" % (page,)))
        results_returned = len(loop_result) > 0 and ('code' not in loop_result or loop_result['code'] != "rest_post_invalid_page_number")
        if results_returned:
            result += loop_result 
        page += 1
    return result

def prepare_item_for_upload_site_custom(item, left_wp, right_wp):
    if 'toolset-meta' in item and 'campos-dos-produtos' in item['toolset-meta'] and 'pdf' in item['toolset-meta']['campos-dos-produtos']:
        item['toolset-meta']['campos-dos-produtos']['pdf-2'] = item['toolset-meta']['campos-dos-produtos']['pdf']
    return item

def prepare_item_for_upload(item_to_upload, left_wp, right_wp):
    item = dict(item_to_upload)
    item['old_id'] = item['id']
    del item['id']
    del item['translations']
    if 'post' in item: del item['post']
    if 'author' in item:
        item['author'] = left_to_right_user_map[item['author']] if item['author'] in left_to_right_user_map else next(iter(left_to_right_user_map.values()))
    if item['status'] == 'inherit':
        item['status'] = 'publish'
    for key in [ 'title', 'content', 'excerpt' ]:
        if key in item and not isinstance(item[key], str) and 'rendered' in item[key]: item[key] = item[key]['rendered']
    for key in [ 'header_stamp', 'featured_media', 'pdf_doc' ]:
        if key in item and str(item[key]) != "" and str(item[key]) != "0" and str(item[key]) in left_to_right_media_map:
            item[key] = str(left_to_right_media_map[str(item[key])]) if str(item[key]) in left_to_right_media_map else str(item[key])
    for taxonomy,category_map in left_to_right_category_map.items():
        if taxonomy in item:
            item[taxonomy] = [ category_map[cat] for cat in item[taxonomy] ]
    if 'featured_media' in item and item['featured_media'] in left_to_right_media_map:
        item['featured_media'] = left_to_right_media_map[item['featured_media']]
    if 'toolset-meta' in item:
        item = item | {
            field_name: left_to_right_media_map[field_value['attachment_id']]
            for _group_name, group_fields in item['toolset-meta'].items() if isinstance(group_fields, dict) for field_name, field_value in group_fields.items() if field_value['type'] == 'image' \
                and field_value['attachment_id'] != None and field_value['attachment_id'] in left_to_right_media_map
        }
    if switch_builders:
        text = requests.get(item['link'], headers={ 'User-Agent': 'curl/7.86.0' }).text
        if text.find('class="et_pb_post'):
            article = text[text.find('<article'):]
            article = article[article.find('>')+1:]
            article = article[::-1]
            article = article[article.find('elcitra/<'):]
            article = article[article.find('>'):]
            article = article[::-1]
            css = text[text.find("<style id='divi-style-inline-inline-css'"):]
            css = css[css.find(">")+1:]
            css = css[:css.find('</style')]
            item['content'] = '{}<style type="text/css" scoped>{}</style>'.format(article, css)
    item = prepare_item_for_upload_site_custom(item, left_wp, right_wp)
    return item

def generate_taxonomy_category_map(left, right, taxonomy):
    if enable_cache and os.path.isfile("left_categories.json"):
        with open("left_categories.json", "r") as cache_file:
            left_categories = json.loads(cache_file.read())
    else:
        left_categories = { category['slug']: {
            'id': category['id'],
            'translations': category['translations']
        } for category in wp_get_paged(left, "/%s" % (taxonomy,)) }
        if enable_cache:
            with open("left_categories.json", "w") as cache_file:
                cache_file.write(json.dumps(left_categories))
    if enable_cache and os.path.isfile("right_categories.json"):
        with open("right_categories.json", "r") as cache_file:
            right_categories = json.loads(cache_file.read())
    else:
        right_categories = { category['slug']: {
            'id': category['id'],
            'translations': category['translations']
        } for category in wp_get_paged(right, "/%s" % (taxonomy,)) }
        if enable_cache:
            with open("right_categories.json", "w") as cache_file:
                cache_file.write(json.dumps(right_categories))

    missing_categories = ""
    for slug,left_term in left_categories.items():
        if slug not in right_categories:
            missing_categories += " %s\n" % (slug,)
            continue
        for lang in left_term['translations']:
            if lang not in right_categories[slug]['translations']:
                missing_categories += " %s translation to %s\n" % (slug,lang)
    if missing_categories != "":
        print("Missing categories:\n" + missing_categories)
        raise Exception("Taxonomy %s has missing categories on the right side" % (taxonomy,))
    result = {}
    for slug,left_term in left_categories.items():
        right_term = right_categories[slug]
        result[left_term['id']] = right_term['id']
        if 0 < len(left_term['translations']):
            for lang,left_id in left_term['translations'].items():
                result[left_id] = right_term['translations'][lang]
    return result

def generate_category_map(left, right, post_type):
    left_post_taxonomies = [ "categories" if tax == "category" else tax for tax in wp_get(left, "/types/%s" % ("post" if post_type == "posts" else post_type,))['taxonomies'] ]
    right_post_taxonomies = [ "categories" if tax == "category" else tax for tax in wp_get(left, "/types/%s" % ("post" if post_type == "posts" else post_type,))['taxonomies'] ]
    if left_post_taxonomies != right_post_taxonomies:
        raise Exception("Post taxonomies are different between left and right")
    return { taxonomy: generate_taxonomy_category_map(left, right, taxonomy) for taxonomy in left_post_taxonomies }

if len(sys.argv) < 2:
    sys.stderr.write("Usage: sync_posts <post_type> [--switch-builders]")
    sys.exit(1)
post_type = sys.argv[1]
switch_builders = False
if len(sys.argv) > 2 and sys.argv[2] == "--switch-builders":
    switch_builders = True

if enable_cache and os.path.isfile("left_posts.json"):
    with open("left_posts.json", "r") as cache_file:
        left_posts = json.loads(cache_file.read())
else:
    left_posts = wp_get_paged(left, "/%s" % (post_type,))
    if enable_cache:
        with open("left_posts.json", "w") as cache_file:
            cache_file.write(json.dumps(left_posts))

if enable_cache and os.path.isfile("right_posts.json"):
    with open("right_posts.json", "r") as cache_file:
        right_posts = json.loads(cache_file.read())
else:
    right_posts = wp_get_paged(right, "/%s" % (post_type,))
    if enable_cache:
        with open("right_posts.json", "w") as cache_file:
            cache_file.write(json.dumps(right_posts))

if enable_cache and os.path.isfile("left_to_right_category_map.json"):
    with open("left_to_right_category_map.json", "r") as cache_file:
        left_to_right_category_map = json.loads(cache_file.read())
    left_to_right_category_map = { taxonomy: { int(k): v for k,v in categories.items() } for taxonomy, categories in left_to_right_category_map.items() }
else:
    left_to_right_category_map = generate_category_map(left, right, post_type)
    if enable_cache:
        with open("left_to_right_category_map.json", "w") as cache_file:
            cache_file.write(json.dumps(left_to_right_category_map))

for left_item in left_posts:
    found = False
    for right_item in right_posts:
        if 'toolset-meta' in right_item \
                and 'campos-de-migracao' in right_item['toolset-meta'] \
                and right_item['toolset-meta']['campos-de-migracao']['old_id']['raw'] != "" \
                and int(right_item['toolset-meta']['campos-de-migracao']['old_id']['raw']) == left_item['id']:
            print("Existing: %d -> %d" % (left_item['id'], right_item['id']))
            found = True
            break
        if left_item['slug'] == right_item['slug']:
            print("Existing: %d -> %d" % (left_item['id'], right_item['id']))
            found = True
            break
    if found:
        continue
    to_upload = prepare_item_for_upload(left_item, left, right)
    right_item = wp_post_json(right, "/%s" % (post_type,), to_upload)
    if 'id' in right_item:
        print("Created: {} -> {}".format(to_upload['old_id'], right_item['id']))
    else:
        pprint(right_item)
        raise Exception("Failed to upload post")
    for language,left_translation_id in left_item['translations'].items():
        left_translation = wp_get(left, "/%s/%d" % (post_type, left_translation_id))
        right_translation = prepare_item_for_upload(left_translation, left, right)
        if 'featured_media' in right_item and right_item['featured_media'] != 0 and ('featured_media' not in right_translation or right_translation['featured_media'] == 0):
            right_translation['featured_media'] = right_item['featured_media']
        right_translation = wp_post_json(right, "/%s" % (post_type,), right_translation)
        requests.post("%s/wp-json/link_translation/post" % (right['url'],), 
                            data={'left': right_item['id'], 'right': right_translation['id'], 'lang': language},
                            headers = {
                                    'Authorization': 'Basic ' + base64.b64encode((right['username'] + ':' + right['password']).encode()).decode('utf-8'),
                                    'Accept': 'application/json',
                                    'User-Agent': 'curl/7.86.0'
                            }).json()
